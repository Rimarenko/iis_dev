#enable remote management of a Windows Server
Enable-PSRemoting -Force 


# Rename server
(Get-WmiObject Win32_ComputerSystem).Rename("VM2_FOR_TEST_CORE")

# Find interfaces
$adr = Get-NetIPInterface
$interfaces = @()
foreach ($a in $adr)
{
if ($a.AddressFamily -like "IPv4")# -and -not $a.InterfaceAlias.Contains("Loopback"))
{
$interfaces += $a.ifIndex
}
}

# Set new IP Address
New-NetIPAddress 될nterfaceIndex $interfaces[0] -AddressFamily IPv4 될PAddress 209.190.121.252 -PrefixLength 29
New-NetIPAddress 될nterfaceIndex $interfaces[1] -AddressFamily IPv4 될PAddress 192.168.88.2 -PrefixLength 24

# Set new password local Administrator
$password = ConvertTo-SecureString "dsf@Fbhc!!hc23P4P" -AsPlainText -Force
Set-LocalUser Administrator -Password $password



$available = $true
while ($available)
{
Test-WSMan -ComputerName goodzon.flc
if (-not $?)
     {
        Write-Output "Unavailable"
     }
else {$available = $false}
}
Write-Output "YES"



mkdir "C:\Program Files\OpenSSH-Win64"
$folderssh = "C:\Program Files\OpenSSH-Win64"
$urlssh = "https://github.com/PowerShell/Win32-OpenSSH/releases/download/v7.7.2.0p1-Beta/OpenSSH-Win64.zip"
$outputssh = "$folderssh\OpenSSH-Win64.zip"
bitsadmin /transfer mydownload /dynamic /download /priority FOREGROUND $urlssh $outputssh 
$shell = new-object -com shell.application
$zip = $shell.NameSpace($outputssh)
foreach($item in $zip.items())
{
 $shell.Namespace("C:\Program Files\").copyhere($item)
}
cd $folderssh
powershell.exe -ExecutionPolicy Bypass -File install-sshd.ps1
Set-Service sshd -StartupType Automatic
netsh advfirewall firewall add rule name=sshd dir=in action=allow protocol=TCP localport=22
net start sshd




#connect to remote server
$computerName = 'VM2_FOR_TEST_CORE'
$credential = Get-Credential
Enter-PSSession -ComputerName $computerName -Credential $credential

#install IIS with depends
Install-WindowsFeature -Name Web-Server -IncludeManagementTools -IncludeAllSubFeature # install .net application

#install .NET
mkdir "C:\Program Files\dotnet"
$dotNetSdkFolder = "C:\Program Files\dotnet"
$url = "https://download.visualstudio.microsoft.com/download/pr/7010cdb4-ae43-408b-8c9f-5f94101a1c70/3e1ae56a072c7c397f10278d7643b3e9/dotnet-sdk-2.1.403-win-gs-x64.exe"
$output = "$dotNetSdkFolder\dotnet-sdk-2.1.403-win-gs-x64.exe"
Import-Module BitsTransfer
Start-BitsTransfer -Source $url -Destination $output
start-process -FilePath "$dotNetSdkFolder\dotnet-sdk-2.1.403-win-gs-x64.exe" -ArgumentList "/silent /accepteula" -Wait

# copy application with GitHub
$AppFolder = "C:\inetpub"
$urlApp = "https://github.com/gigazet/aspnethelloworld/archive/master.zip"
$outputApp = "$AppFolder\master.zip"
Import-Module BitsTransfer
Start-BitsTransfer -Source $urlApp -Destination $outputApp
$shell = new-object -com shell.application
$zip = $shell.NameSpace($outputApp)
foreach($item in $zip.items())
{
 $shell.Namespace($AppFolder).copyhere($item)
}


cd $AppFolder\aspnethelloworld-master
dotnet build
dotnet publish

netsh advfirewall firewall add rule name="DevOps" dir=in action=allow protocol=TCP localport=9000
cd $AppFolder\aspnethelloworld-master 
dotnet run 